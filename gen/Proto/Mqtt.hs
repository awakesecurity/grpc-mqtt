{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.Mqtt where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data AuxControl = AuxControlUnknown
                | AuxControlAlive
                | AuxControlTerminate
                deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AuxControl where
        nameOf _ = (Hs.fromString "AuxControl")
 
instance HsProtobuf.HasDefault AuxControl
 
instance Hs.Bounded AuxControl where
        minBound = AuxControlUnknown
        maxBound = AuxControlTerminate
 
instance Hs.Ord AuxControl where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum AuxControl where
        toProtoEnumMay 0 = Hs.Just AuxControlUnknown
        toProtoEnumMay 1 = Hs.Just AuxControlAlive
        toProtoEnumMay 2 = Hs.Just AuxControlTerminate
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (AuxControlUnknown) = 0
        fromProtoEnum (AuxControlAlive) = 1
        fromProtoEnum (AuxControlTerminate) = 2
 
instance HsJSONPB.ToJSONPB AuxControl where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB AuxControl where
        parseJSONPB (HsJSONPB.String "Unknown") = Hs.pure AuxControlUnknown
        parseJSONPB (HsJSONPB.String "Alive") = Hs.pure AuxControlAlive
        parseJSONPB (HsJSONPB.String "Terminate")
          = Hs.pure AuxControlTerminate
        parseJSONPB v = (HsJSONPB.typeMismatch "AuxControl" v)
 
instance HsJSONPB.ToJSON AuxControl where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AuxControl where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite AuxControl
 
newtype AuxControlMessage = AuxControlMessage{auxControlMessageValue
                                              :: HsProtobuf.Enumerated Proto.Mqtt.AuxControl}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AuxControlMessage where
        nameOf _ = (Hs.fromString "AuxControlMessage")
 
instance HsProtobuf.HasDefault AuxControlMessage
 
instance HsProtobuf.Message AuxControlMessage where
        encodeMessage _
          AuxControlMessage{auxControlMessageValue = auxControlMessageValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   auxControlMessageValue)])
        decodeMessage _
          = (Hs.pure AuxControlMessage) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "AuxControl")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AuxControlMessage where
        toJSONPB (AuxControlMessage f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (AuxControlMessage f1)
          = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB AuxControlMessage where
        parseJSONPB
          = (HsJSONPB.withObject "AuxControlMessage"
               (\ obj -> (Hs.pure AuxControlMessage) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON AuxControlMessage where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AuxControlMessage where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AuxControlMessage where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               auxControlMessageValue <- declare_value Proxy.Proxy
               let _ = Hs.pure AuxControlMessage <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AuxControlMessage",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", auxControlMessageValue)]}})
 
data RError = RErrorUnknownError
            | RErrorNoParseWireType
            | RErrorNoParseBinary
            | RErrorNoParseEmbedded
            | RErrorIOGRPCCallOk
            | RErrorIOGRPCCallError
            | RErrorIOGRPCCallNotOnServer
            | RErrorIOGRPCCallNotOnClient
            | RErrorIOGRPCCallAlreadyAccepted
            | RErrorIOGRPCCallAlreadyInvoked
            | RErrorIOGRPCCallNotInvoked
            | RErrorIOGRPCCallAlreadyFinished
            | RErrorIOGRPCCallTooManyOperations
            | RErrorIOGRPCCallInvalidFlags
            | RErrorIOGRPCCallInvalidMetadata
            | RErrorIOGRPCCallInvalidMessage
            | RErrorIOGRPCCallNotServerCompletionQueue
            | RErrorIOGRPCCallBatchTooBig
            | RErrorIOGRPCCallPayloadTypeMismatch
            | RErrorIOGRPCCallCompletionQueueShutdown
            | RErrorIOGRPCTimeout
            | RErrorIOGRPCShutdown
            | RErrorIOGRPCShutdownFailure
            | RErrorIOGRPCBadStatusCode
            | RErrorIOGRPCDecode
            | RErrorIOGRPCInternalUnexpectedRecv
            | RErrorIOGRPCHandlerException
            | RErrorMQTTFailure
            deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RError where
        nameOf _ = (Hs.fromString "RError")
 
instance HsProtobuf.HasDefault RError
 
instance Hs.Bounded RError where
        minBound = RErrorUnknownError
        maxBound = RErrorMQTTFailure
 
instance Hs.Ord RError where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum RError where
        toProtoEnumMay 0 = Hs.Just RErrorUnknownError
        toProtoEnumMay 1 = Hs.Just RErrorNoParseWireType
        toProtoEnumMay 2 = Hs.Just RErrorNoParseBinary
        toProtoEnumMay 3 = Hs.Just RErrorNoParseEmbedded
        toProtoEnumMay 4 = Hs.Just RErrorIOGRPCCallOk
        toProtoEnumMay 5 = Hs.Just RErrorIOGRPCCallError
        toProtoEnumMay 6 = Hs.Just RErrorIOGRPCCallNotOnServer
        toProtoEnumMay 7 = Hs.Just RErrorIOGRPCCallNotOnClient
        toProtoEnumMay 8 = Hs.Just RErrorIOGRPCCallAlreadyAccepted
        toProtoEnumMay 9 = Hs.Just RErrorIOGRPCCallAlreadyInvoked
        toProtoEnumMay 10 = Hs.Just RErrorIOGRPCCallNotInvoked
        toProtoEnumMay 11 = Hs.Just RErrorIOGRPCCallAlreadyFinished
        toProtoEnumMay 12 = Hs.Just RErrorIOGRPCCallTooManyOperations
        toProtoEnumMay 13 = Hs.Just RErrorIOGRPCCallInvalidFlags
        toProtoEnumMay 14 = Hs.Just RErrorIOGRPCCallInvalidMetadata
        toProtoEnumMay 15 = Hs.Just RErrorIOGRPCCallInvalidMessage
        toProtoEnumMay 16
          = Hs.Just RErrorIOGRPCCallNotServerCompletionQueue
        toProtoEnumMay 17 = Hs.Just RErrorIOGRPCCallBatchTooBig
        toProtoEnumMay 18 = Hs.Just RErrorIOGRPCCallPayloadTypeMismatch
        toProtoEnumMay 19 = Hs.Just RErrorIOGRPCCallCompletionQueueShutdown
        toProtoEnumMay 20 = Hs.Just RErrorIOGRPCTimeout
        toProtoEnumMay 21 = Hs.Just RErrorIOGRPCShutdown
        toProtoEnumMay 22 = Hs.Just RErrorIOGRPCShutdownFailure
        toProtoEnumMay 23 = Hs.Just RErrorIOGRPCBadStatusCode
        toProtoEnumMay 24 = Hs.Just RErrorIOGRPCDecode
        toProtoEnumMay 25 = Hs.Just RErrorIOGRPCInternalUnexpectedRecv
        toProtoEnumMay 26 = Hs.Just RErrorIOGRPCHandlerException
        toProtoEnumMay 27 = Hs.Just RErrorMQTTFailure
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (RErrorUnknownError) = 0
        fromProtoEnum (RErrorNoParseWireType) = 1
        fromProtoEnum (RErrorNoParseBinary) = 2
        fromProtoEnum (RErrorNoParseEmbedded) = 3
        fromProtoEnum (RErrorIOGRPCCallOk) = 4
        fromProtoEnum (RErrorIOGRPCCallError) = 5
        fromProtoEnum (RErrorIOGRPCCallNotOnServer) = 6
        fromProtoEnum (RErrorIOGRPCCallNotOnClient) = 7
        fromProtoEnum (RErrorIOGRPCCallAlreadyAccepted) = 8
        fromProtoEnum (RErrorIOGRPCCallAlreadyInvoked) = 9
        fromProtoEnum (RErrorIOGRPCCallNotInvoked) = 10
        fromProtoEnum (RErrorIOGRPCCallAlreadyFinished) = 11
        fromProtoEnum (RErrorIOGRPCCallTooManyOperations) = 12
        fromProtoEnum (RErrorIOGRPCCallInvalidFlags) = 13
        fromProtoEnum (RErrorIOGRPCCallInvalidMetadata) = 14
        fromProtoEnum (RErrorIOGRPCCallInvalidMessage) = 15
        fromProtoEnum (RErrorIOGRPCCallNotServerCompletionQueue) = 16
        fromProtoEnum (RErrorIOGRPCCallBatchTooBig) = 17
        fromProtoEnum (RErrorIOGRPCCallPayloadTypeMismatch) = 18
        fromProtoEnum (RErrorIOGRPCCallCompletionQueueShutdown) = 19
        fromProtoEnum (RErrorIOGRPCTimeout) = 20
        fromProtoEnum (RErrorIOGRPCShutdown) = 21
        fromProtoEnum (RErrorIOGRPCShutdownFailure) = 22
        fromProtoEnum (RErrorIOGRPCBadStatusCode) = 23
        fromProtoEnum (RErrorIOGRPCDecode) = 24
        fromProtoEnum (RErrorIOGRPCInternalUnexpectedRecv) = 25
        fromProtoEnum (RErrorIOGRPCHandlerException) = 26
        fromProtoEnum (RErrorMQTTFailure) = 27
 
instance HsJSONPB.ToJSONPB RError where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB RError where
        parseJSONPB (HsJSONPB.String "UnknownError")
          = Hs.pure RErrorUnknownError
        parseJSONPB (HsJSONPB.String "NoParseWireType")
          = Hs.pure RErrorNoParseWireType
        parseJSONPB (HsJSONPB.String "NoParseBinary")
          = Hs.pure RErrorNoParseBinary
        parseJSONPB (HsJSONPB.String "NoParseEmbedded")
          = Hs.pure RErrorNoParseEmbedded
        parseJSONPB (HsJSONPB.String "IOGRPCCallOk")
          = Hs.pure RErrorIOGRPCCallOk
        parseJSONPB (HsJSONPB.String "IOGRPCCallError")
          = Hs.pure RErrorIOGRPCCallError
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotOnServer")
          = Hs.pure RErrorIOGRPCCallNotOnServer
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotOnClient")
          = Hs.pure RErrorIOGRPCCallNotOnClient
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyAccepted")
          = Hs.pure RErrorIOGRPCCallAlreadyAccepted
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyInvoked")
          = Hs.pure RErrorIOGRPCCallAlreadyInvoked
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotInvoked")
          = Hs.pure RErrorIOGRPCCallNotInvoked
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyFinished")
          = Hs.pure RErrorIOGRPCCallAlreadyFinished
        parseJSONPB (HsJSONPB.String "IOGRPCCallTooManyOperations")
          = Hs.pure RErrorIOGRPCCallTooManyOperations
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidFlags")
          = Hs.pure RErrorIOGRPCCallInvalidFlags
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidMetadata")
          = Hs.pure RErrorIOGRPCCallInvalidMetadata
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidMessage")
          = Hs.pure RErrorIOGRPCCallInvalidMessage
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotServerCompletionQueue")
          = Hs.pure RErrorIOGRPCCallNotServerCompletionQueue
        parseJSONPB (HsJSONPB.String "IOGRPCCallBatchTooBig")
          = Hs.pure RErrorIOGRPCCallBatchTooBig
        parseJSONPB (HsJSONPB.String "IOGRPCCallPayloadTypeMismatch")
          = Hs.pure RErrorIOGRPCCallPayloadTypeMismatch
        parseJSONPB (HsJSONPB.String "IOGRPCCallCompletionQueueShutdown")
          = Hs.pure RErrorIOGRPCCallCompletionQueueShutdown
        parseJSONPB (HsJSONPB.String "IOGRPCTimeout")
          = Hs.pure RErrorIOGRPCTimeout
        parseJSONPB (HsJSONPB.String "IOGRPCShutdown")
          = Hs.pure RErrorIOGRPCShutdown
        parseJSONPB (HsJSONPB.String "IOGRPCShutdownFailure")
          = Hs.pure RErrorIOGRPCShutdownFailure
        parseJSONPB (HsJSONPB.String "IOGRPCBadStatusCode")
          = Hs.pure RErrorIOGRPCBadStatusCode
        parseJSONPB (HsJSONPB.String "IOGRPCDecode")
          = Hs.pure RErrorIOGRPCDecode
        parseJSONPB (HsJSONPB.String "IOGRPCInternalUnexpectedRecv")
          = Hs.pure RErrorIOGRPCInternalUnexpectedRecv
        parseJSONPB (HsJSONPB.String "IOGRPCHandlerException")
          = Hs.pure RErrorIOGRPCHandlerException
        parseJSONPB (HsJSONPB.String "MQTTFailure")
          = Hs.pure RErrorMQTTFailure
        parseJSONPB v = (HsJSONPB.typeMismatch "RError" v)
 
instance HsJSONPB.ToJSON RError where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RError where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite RError
 
data RemoteError = RemoteError{remoteErrorErrorType ::
                               HsProtobuf.Enumerated Proto.Mqtt.RError,
                               remoteErrorMessage :: Hs.Text,
                               remoteErrorExtra :: Hs.Maybe RemoteErrorExtra}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RemoteError where
        nameOf _ = (Hs.fromString "RemoteError")
 
instance HsProtobuf.HasDefault RemoteError
 
instance HsProtobuf.Message RemoteError where
        encodeMessage _
          RemoteError{remoteErrorErrorType = remoteErrorErrorType,
                      remoteErrorMessage = remoteErrorMessage,
                      remoteErrorExtra = remoteErrorExtra}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   remoteErrorErrorType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   remoteErrorMessage),
                case remoteErrorExtra of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RemoteErrorExtraStatusCode y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             RemoteErrorExtraEmbeddedError y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.RemoteError)
                                        @(HsProtobuf.Nested Proto.Mqtt.RemoteError)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure RemoteError) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. RemoteErrorExtraStatusCode)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap RemoteErrorExtraEmbeddedError)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.RemoteError))
                        @(_ (Hs.Maybe Proto.Mqtt.RemoteError))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "RError")))
                (HsProtobuf.Single "error_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "message")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RemoteError where
        toJSONPB (RemoteError f1 f2 f3_or_f4)
          = (HsJSONPB.object
               ["error_type" .= f1, "message" .= f2,
                (let encodeExtra
                       = (case f3_or_f4 of
                              Hs.Just (RemoteErrorExtraStatusCode f3)
                                -> (HsJSONPB.pair "status_code" f3)
                              Hs.Just (RemoteErrorExtraEmbeddedError f4)
                                -> (HsJSONPB.pair "embedded_error" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("extra" .= (HsJSONPB.objectOrNull [encodeExtra] options)) options
                       else encodeExtra options)])
        toEncodingPB (RemoteError f1 f2 f3_or_f4)
          = (HsJSONPB.pairs
               ["error_type" .= f1, "message" .= f2,
                (let encodeExtra
                       = (case f3_or_f4 of
                              Hs.Just (RemoteErrorExtraStatusCode f3)
                                -> (HsJSONPB.pair "status_code" f3)
                              Hs.Just (RemoteErrorExtraEmbeddedError f4)
                                -> (HsJSONPB.pair "embedded_error" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("extra" .= (HsJSONPB.pairsOrNull [encodeExtra] options)) options
                       else encodeExtra options)])
 
instance HsJSONPB.FromJSONPB RemoteError where
        parseJSONPB
          = (HsJSONPB.withObject "RemoteError"
               (\ obj ->
                  (Hs.pure RemoteError) <*> obj .: "error_type" <*> obj .: "message"
                    <*>
                    (let parseExtra parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RemoteErrorExtraStatusCode <$>
                                  (HsJSONPB.parseField parseObj "status_code"),
                                Hs.Just Hs.. RemoteErrorExtraEmbeddedError <$>
                                  (HsJSONPB.parseField parseObj "embedded_error"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "extra") Hs.>>= (HsJSONPB.withObject "extra" parseExtra))
                         <|> (parseExtra obj))))
 
instance HsJSONPB.ToJSON RemoteError where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RemoteError where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RemoteError where
        declareNamedSchema _
          = do let declare_error_type = HsJSONPB.declareSchemaRef
               remoteErrorErrorType <- declare_error_type Proxy.Proxy
               let declare_message = HsJSONPB.declareSchemaRef
               remoteErrorMessage <- declare_message Proxy.Proxy
               let declare_extra = HsJSONPB.declareSchemaRef
               remoteErrorExtra <- declare_extra Proxy.Proxy
               let _ = Hs.pure RemoteError <*> HsJSONPB.asProxy declare_error_type
                         <*> HsJSONPB.asProxy declare_message
                         <*> HsJSONPB.asProxy declare_extra
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RemoteError",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("error_type", remoteErrorErrorType),
                                                        ("message", remoteErrorMessage),
                                                        ("extra", remoteErrorExtra)]}})
 
data RemoteErrorExtra = RemoteErrorExtraStatusCode Hs.Int32
                      | RemoteErrorExtraEmbeddedError Proto.Mqtt.RemoteError
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RemoteErrorExtra where
        nameOf _ = (Hs.fromString "RemoteErrorExtra")
 
instance HsJSONPB.ToSchema RemoteErrorExtra where
        declareNamedSchema _
          = do let declare_status_code = HsJSONPB.declareSchemaRef
               remoteErrorExtraStatusCode <- declare_status_code Proxy.Proxy
               let _ = Hs.pure RemoteErrorExtraStatusCode <*>
                         HsJSONPB.asProxy declare_status_code
               let declare_embedded_error = HsJSONPB.declareSchemaRef
               remoteErrorExtraEmbeddedError <- declare_embedded_error Proxy.Proxy
               let _ = Hs.pure RemoteErrorExtraEmbeddedError <*>
                         HsJSONPB.asProxy declare_embedded_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RemoteErrorExtra",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("status_code", remoteErrorExtraStatusCode),
                                                        ("embedded_error",
                                                         remoteErrorExtraEmbeddedError)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})