{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports       #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing       #-}
{-# OPTIONS_GHC -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.Message where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data TwoInts = TwoInts{twoIntsInt1 :: Hs.Int32,
                       twoIntsInt2 :: Hs.Int32}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TwoInts where
        nameOf _ = (Hs.fromString "TwoInts")
 
instance HsProtobuf.HasDefault TwoInts
 
instance HsProtobuf.Message TwoInts where
        encodeMessage _
          TwoInts{twoIntsInt1 = twoIntsInt1, twoIntsInt2 = twoIntsInt2}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   twoIntsInt1),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   twoIntsInt2)])
        decodeMessage _
          = (Hs.pure TwoInts) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "int1")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "int2")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TwoInts where
        toJSONPB (TwoInts f1 f2)
          = (HsJSONPB.object ["int1" .= f1, "int2" .= f2])
        toEncodingPB (TwoInts f1 f2)
          = (HsJSONPB.pairs ["int1" .= f1, "int2" .= f2])
 
instance HsJSONPB.FromJSONPB TwoInts where
        parseJSONPB
          = (HsJSONPB.withObject "TwoInts"
               (\ obj -> (Hs.pure TwoInts) <*> obj .: "int1" <*> obj .: "int2"))
 
instance HsJSONPB.ToJSON TwoInts where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TwoInts where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TwoInts where
        declareNamedSchema _
          = do let declare_int1 = HsJSONPB.declareSchemaRef
               twoIntsInt1 <- declare_int1 Proxy.Proxy
               let declare_int2 = HsJSONPB.declareSchemaRef
               twoIntsInt2 <- declare_int2 Proxy.Proxy
               let _ = Hs.pure TwoInts <*> HsJSONPB.asProxy declare_int1 <*>
                         HsJSONPB.asProxy declare_int2
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TwoInts",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("int1", twoIntsInt1),
                                                        ("int2", twoIntsInt2)]}})
 
newtype OneInt = OneInt{oneIntResult :: Hs.Int32}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OneInt where
        nameOf _ = (Hs.fromString "OneInt")
 
instance HsProtobuf.HasDefault OneInt
 
instance HsProtobuf.Message OneInt where
        encodeMessage _ OneInt{oneIntResult = oneIntResult}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   oneIntResult)])
        decodeMessage _
          = (Hs.pure OneInt) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "result")
                []
                "")]
 
instance HsJSONPB.ToJSONPB OneInt where
        toJSONPB (OneInt f1) = (HsJSONPB.object ["result" .= f1])
        toEncodingPB (OneInt f1) = (HsJSONPB.pairs ["result" .= f1])
 
instance HsJSONPB.FromJSONPB OneInt where
        parseJSONPB
          = (HsJSONPB.withObject "OneInt"
               (\ obj -> (Hs.pure OneInt) <*> obj .: "result"))
 
instance HsJSONPB.ToJSON OneInt where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON OneInt where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema OneInt where
        declareNamedSchema _
          = do let declare_result = HsJSONPB.declareSchemaRef
               oneIntResult <- declare_result Proxy.Proxy
               let _ = Hs.pure OneInt <*> HsJSONPB.asProxy declare_result
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "OneInt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("result", oneIntResult)]}})
 
data StreamRequest = StreamRequest{streamRequestName :: Hs.Text,
                                   streamRequestNumReplies :: Hs.Word32}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named StreamRequest where
        nameOf _ = (Hs.fromString "StreamRequest")
 
instance HsProtobuf.HasDefault StreamRequest
 
instance HsProtobuf.Message StreamRequest where
        encodeMessage _
          StreamRequest{streamRequestName = streamRequestName,
                        streamRequestNumReplies = streamRequestNumReplies}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   streamRequestName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   streamRequestNumReplies)])
        decodeMessage _
          = (Hs.pure StreamRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "num_replies")
                []
                "")]
 
instance HsJSONPB.ToJSONPB StreamRequest where
        toJSONPB (StreamRequest f1 f2)
          = (HsJSONPB.object ["name" .= f1, "num_replies" .= f2])
        toEncodingPB (StreamRequest f1 f2)
          = (HsJSONPB.pairs ["name" .= f1, "num_replies" .= f2])
 
instance HsJSONPB.FromJSONPB StreamRequest where
        parseJSONPB
          = (HsJSONPB.withObject "StreamRequest"
               (\ obj ->
                  (Hs.pure StreamRequest) <*> obj .: "name" <*>
                    obj .: "num_replies"))
 
instance HsJSONPB.ToJSON StreamRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON StreamRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema StreamRequest where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               streamRequestName <- declare_name Proxy.Proxy
               let declare_num_replies = HsJSONPB.declareSchemaRef
               streamRequestNumReplies <- declare_num_replies Proxy.Proxy
               let _ = Hs.pure StreamRequest <*> HsJSONPB.asProxy declare_name <*>
                         HsJSONPB.asProxy declare_num_replies
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StreamRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", streamRequestName),
                                                        ("num_replies", streamRequestNumReplies)]}})
 
newtype StreamReply = StreamReply{streamReplyReply :: Hs.Text}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named StreamReply where
        nameOf _ = (Hs.fromString "StreamReply")
 
instance HsProtobuf.HasDefault StreamReply
 
instance HsProtobuf.Message StreamReply where
        encodeMessage _ StreamReply{streamReplyReply = streamReplyReply}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   streamReplyReply)])
        decodeMessage _
          = (Hs.pure StreamReply) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "reply")
                []
                "")]
 
instance HsJSONPB.ToJSONPB StreamReply where
        toJSONPB (StreamReply f1) = (HsJSONPB.object ["reply" .= f1])
        toEncodingPB (StreamReply f1) = (HsJSONPB.pairs ["reply" .= f1])
 
instance HsJSONPB.FromJSONPB StreamReply where
        parseJSONPB
          = (HsJSONPB.withObject "StreamReply"
               (\ obj -> (Hs.pure StreamReply) <*> obj .: "reply"))
 
instance HsJSONPB.ToJSON StreamReply where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON StreamReply where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema StreamReply where
        declareNamedSchema _
          = do let declare_reply = HsJSONPB.declareSchemaRef
               streamReplyReply <- declare_reply Proxy.Proxy
               let _ = Hs.pure StreamReply <*> HsJSONPB.asProxy declare_reply
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StreamReply",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("reply", streamReplyReply)]}})
 
newtype BiDiRequestReply = BiDiRequestReply{biDiRequestReplyReply
                                            :: Hs.Text}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BiDiRequestReply where
        nameOf _ = (Hs.fromString "BiDiRequestReply")
 
instance HsProtobuf.HasDefault BiDiRequestReply
 
instance HsProtobuf.Message BiDiRequestReply where
        encodeMessage _
          BiDiRequestReply{biDiRequestReplyReply = biDiRequestReplyReply}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   biDiRequestReplyReply)])
        decodeMessage _
          = (Hs.pure BiDiRequestReply) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "reply")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BiDiRequestReply where
        toJSONPB (BiDiRequestReply f1) = (HsJSONPB.object ["reply" .= f1])
        toEncodingPB (BiDiRequestReply f1)
          = (HsJSONPB.pairs ["reply" .= f1])
 
instance HsJSONPB.FromJSONPB BiDiRequestReply where
        parseJSONPB
          = (HsJSONPB.withObject "BiDiRequestReply"
               (\ obj -> (Hs.pure BiDiRequestReply) <*> obj .: "reply"))
 
instance HsJSONPB.ToJSON BiDiRequestReply where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BiDiRequestReply where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BiDiRequestReply where
        declareNamedSchema _
          = do let declare_reply = HsJSONPB.declareSchemaRef
               biDiRequestReplyReply <- declare_reply Proxy.Proxy
               let _ = Hs.pure BiDiRequestReply <*> HsJSONPB.asProxy declare_reply
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BiDiRequestReply",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("reply", biDiRequestReplyReply)]}})