{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.Mqtt where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Packet = Packet{packetTerminal :: Hs.Bool,
                     packetSequenceNum :: Hs.Int32, packetPayload :: Hs.ByteString}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Packet where
        nameOf _ = (Hs.fromString "Packet")
 
instance HsProtobuf.HasDefault Packet
 
instance HsProtobuf.Message Packet where
        encodeMessage _
          Packet{packetTerminal = packetTerminal,
                 packetSequenceNum = packetSequenceNum,
                 packetPayload = packetPayload}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   packetTerminal),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   packetSequenceNum),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   packetPayload)])
        decodeMessage _
          = (Hs.pure Packet) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "terminal")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "sequence_num")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Packet where
        toJSONPB (Packet f1 f2 f3)
          = (HsJSONPB.object
               ["terminal" .= f1, "sequence_num" .= f2, "payload" .= f3])
        toEncodingPB (Packet f1 f2 f3)
          = (HsJSONPB.pairs
               ["terminal" .= f1, "sequence_num" .= f2, "payload" .= f3])
 
instance HsJSONPB.FromJSONPB Packet where
        parseJSONPB
          = (HsJSONPB.withObject "Packet"
               (\ obj ->
                  (Hs.pure Packet) <*> obj .: "terminal" <*> obj .: "sequence_num"
                    <*> obj .: "payload"))
 
instance HsJSONPB.ToJSON Packet where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Packet where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Packet where
        declareNamedSchema _
          = do let declare_terminal = HsJSONPB.declareSchemaRef
               packetTerminal <- declare_terminal Proxy.Proxy
               let declare_sequence_num = HsJSONPB.declareSchemaRef
               packetSequenceNum <- declare_sequence_num Proxy.Proxy
               let declare_payload = HsJSONPB.declareSchemaRef
               packetPayload <- declare_payload Proxy.Proxy
               let _ = Hs.pure Packet <*> HsJSONPB.asProxy declare_terminal <*>
                         HsJSONPB.asProxy declare_sequence_num
                         <*> HsJSONPB.asProxy declare_payload
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Packet",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("terminal", packetTerminal),
                                                        ("sequence_num", packetSequenceNum),
                                                        ("payload", packetPayload)]}})
 
data MQTTRequest = MQTTRequest{mqttrequestTimeout :: Hs.Int64,
                               mqttrequestMetamap :: Hs.Maybe Proto.Mqtt.MetadataMap,
                               mqttrequestPayload :: Hs.ByteString}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MQTTRequest where
        nameOf _ = (Hs.fromString "MQTTRequest")
 
instance HsProtobuf.HasDefault MQTTRequest
 
instance HsProtobuf.Message MQTTRequest where
        encodeMessage _
          MQTTRequest{mqttrequestTimeout = mqttrequestTimeout,
                      mqttrequestMetamap = mqttrequestMetamap,
                      mqttrequestPayload = mqttrequestPayload}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   mqttrequestTimeout),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Proto.Mqtt.MetadataMap)
                      @(HsProtobuf.Nested Proto.Mqtt.MetadataMap)
                      mqttrequestMetamap)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   mqttrequestPayload)])
        decodeMessage _
          = (Hs.pure MQTTRequest) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.MetadataMap))
                 @(_ (Hs.Maybe Proto.Mqtt.MetadataMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "timeout")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "MetadataMap")))
                (HsProtobuf.Single "metamap")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MQTTRequest where
        toJSONPB (MQTTRequest f1 f2 f3)
          = (HsJSONPB.object
               ["timeout" .= f1, "metamap" .= f2, "payload" .= f3])
        toEncodingPB (MQTTRequest f1 f2 f3)
          = (HsJSONPB.pairs
               ["timeout" .= f1, "metamap" .= f2, "payload" .= f3])
 
instance HsJSONPB.FromJSONPB MQTTRequest where
        parseJSONPB
          = (HsJSONPB.withObject "MQTTRequest"
               (\ obj ->
                  (Hs.pure MQTTRequest) <*> obj .: "timeout" <*> obj .: "metamap" <*>
                    obj .: "payload"))
 
instance HsJSONPB.ToJSON MQTTRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MQTTRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MQTTRequest where
        declareNamedSchema _
          = do let declare_timeout = HsJSONPB.declareSchemaRef
               mqttrequestTimeout <- declare_timeout Proxy.Proxy
               let declare_metamap = HsJSONPB.declareSchemaRef
               mqttrequestMetamap <- declare_metamap Proxy.Proxy
               let declare_payload = HsJSONPB.declareSchemaRef
               mqttrequestPayload <- declare_payload Proxy.Proxy
               let _ = Hs.pure MQTTRequest <*> HsJSONPB.asProxy declare_timeout
                         <*> HsJSONPB.asProxy declare_metamap
                         <*> HsJSONPB.asProxy declare_payload
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MQTTRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("timeout", mqttrequestTimeout),
                                                        ("metamap", mqttrequestMetamap),
                                                        ("payload", mqttrequestPayload)]}})
 
newtype ResponseBody = ResponseBody{responseBodyValue ::
                                    Hs.ByteString}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ResponseBody where
        nameOf _ = (Hs.fromString "ResponseBody")
 
instance HsProtobuf.HasDefault ResponseBody
 
instance HsProtobuf.Message ResponseBody where
        encodeMessage _ ResponseBody{responseBodyValue = responseBodyValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   responseBodyValue)])
        decodeMessage _
          = (Hs.pure ResponseBody) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ResponseBody where
        toJSONPB (ResponseBody f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (ResponseBody f1) = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB ResponseBody where
        parseJSONPB
          = (HsJSONPB.withObject "ResponseBody"
               (\ obj -> (Hs.pure ResponseBody) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON ResponseBody where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ResponseBody where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ResponseBody where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               responseBodyValue <- declare_value Proxy.Proxy
               let _ = Hs.pure ResponseBody <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ResponseBody",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", responseBodyValue)]}})
 
data MQTTResponse = MQTTResponse{mqttresponseBody ::
                                 Hs.Maybe Proto.Mqtt.ResponseBody,
                                 mqttresponseInitMetamap :: Hs.Maybe Proto.Mqtt.MetadataMap,
                                 mqttresponseTrailMetamap :: Hs.Maybe Proto.Mqtt.MetadataMap,
                                 mqttresponseResponseCode :: Hs.Int32,
                                 mqttresponseDetails :: Hs.Text}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MQTTResponse where
        nameOf _ = (Hs.fromString "MQTTResponse")
 
instance HsProtobuf.HasDefault MQTTResponse
 
instance HsProtobuf.Message MQTTResponse where
        encodeMessage _
          MQTTResponse{mqttresponseBody = mqttresponseBody,
                       mqttresponseInitMetamap = mqttresponseInitMetamap,
                       mqttresponseTrailMetamap = mqttresponseTrailMetamap,
                       mqttresponseResponseCode = mqttresponseResponseCode,
                       mqttresponseDetails = mqttresponseDetails}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Proto.Mqtt.ResponseBody)
                      @(HsProtobuf.Nested Proto.Mqtt.ResponseBody)
                      mqttresponseBody)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Proto.Mqtt.MetadataMap)
                      @(HsProtobuf.Nested Proto.Mqtt.MetadataMap)
                      mqttresponseInitMetamap)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Proto.Mqtt.MetadataMap)
                      @(HsProtobuf.Nested Proto.Mqtt.MetadataMap)
                      mqttresponseTrailMetamap)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   mqttresponseResponseCode),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   mqttresponseDetails)])
        decodeMessage _
          = (Hs.pure MQTTResponse) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.ResponseBody))
                 @(_ (Hs.Maybe Proto.Mqtt.ResponseBody))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.MetadataMap))
                 @(_ (Hs.Maybe Proto.Mqtt.MetadataMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.MetadataMap))
                 @(_ (Hs.Maybe Proto.Mqtt.MetadataMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ResponseBody")))
                (HsProtobuf.Single "body")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "MetadataMap")))
                (HsProtobuf.Single "init_metamap")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "MetadataMap")))
                (HsProtobuf.Single "trail_metamap")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "response_code")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "details")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MQTTResponse where
        toJSONPB (MQTTResponse f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["body" .= f1, "init_metamap" .= f2, "trail_metamap" .= f3,
                "response_code" .= f4, "details" .= f5])
        toEncodingPB (MQTTResponse f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["body" .= f1, "init_metamap" .= f2, "trail_metamap" .= f3,
                "response_code" .= f4, "details" .= f5])
 
instance HsJSONPB.FromJSONPB MQTTResponse where
        parseJSONPB
          = (HsJSONPB.withObject "MQTTResponse"
               (\ obj ->
                  (Hs.pure MQTTResponse) <*> obj .: "body" <*> obj .: "init_metamap"
                    <*> obj .: "trail_metamap"
                    <*> obj .: "response_code"
                    <*> obj .: "details"))
 
instance HsJSONPB.ToJSON MQTTResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MQTTResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MQTTResponse where
        declareNamedSchema _
          = do let declare_body = HsJSONPB.declareSchemaRef
               mqttresponseBody <- declare_body Proxy.Proxy
               let declare_init_metamap = HsJSONPB.declareSchemaRef
               mqttresponseInitMetamap <- declare_init_metamap Proxy.Proxy
               let declare_trail_metamap = HsJSONPB.declareSchemaRef
               mqttresponseTrailMetamap <- declare_trail_metamap Proxy.Proxy
               let declare_response_code = HsJSONPB.declareSchemaRef
               mqttresponseResponseCode <- declare_response_code Proxy.Proxy
               let declare_details = HsJSONPB.declareSchemaRef
               mqttresponseDetails <- declare_details Proxy.Proxy
               let _ = Hs.pure MQTTResponse <*> HsJSONPB.asProxy declare_body <*>
                         HsJSONPB.asProxy declare_init_metamap
                         <*> HsJSONPB.asProxy declare_trail_metamap
                         <*> HsJSONPB.asProxy declare_response_code
                         <*> HsJSONPB.asProxy declare_details
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MQTTResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("body", mqttresponseBody),
                                                        ("init_metamap", mqttresponseInitMetamap),
                                                        ("trail_metamap", mqttresponseTrailMetamap),
                                                        ("response_code", mqttresponseResponseCode),
                                                        ("details", mqttresponseDetails)]}})
 
newtype WrappedResponse = WrappedResponse{wrappedResponseOrError ::
                                          Hs.Maybe WrappedResponseOrError}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named WrappedResponse where
        nameOf _ = (Hs.fromString "WrappedResponse")
 
instance HsProtobuf.HasDefault WrappedResponse
 
instance HsProtobuf.Message WrappedResponse where
        encodeMessage _
          WrappedResponse{wrappedResponseOrError = wrappedResponseOrError}
          = (Hs.mconcat
               [case wrappedResponseOrError of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             WrappedResponseOrErrorResponse y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.MQTTResponse)
                                        @(HsProtobuf.Nested Proto.Mqtt.MQTTResponse)
                                        (Hs.Just y)))
                             WrappedResponseOrErrorError y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.RemoteError)
                                        @(HsProtobuf.Nested Proto.Mqtt.RemoteError)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure WrappedResponse) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap WrappedResponseOrErrorResponse)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.MQTTResponse))
                        @(_ (Hs.Maybe Proto.Mqtt.MQTTResponse))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap WrappedResponseOrErrorError)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.RemoteError))
                        @(_ (Hs.Maybe Proto.Mqtt.RemoteError))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB WrappedResponse where
        toJSONPB (WrappedResponse f1_or_f2)
          = (HsJSONPB.object
               [(let encodeOr_error
                       = (case f1_or_f2 of
                              Hs.Just (WrappedResponseOrErrorResponse f1)
                                -> (HsJSONPB.pair "response" f1)
                              Hs.Just (WrappedResponseOrErrorError f2)
                                -> (HsJSONPB.pair "error" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("or_error" .= (HsJSONPB.objectOrNull [encodeOr_error] options))
                         options
                       else encodeOr_error options)])
        toEncodingPB (WrappedResponse f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeOr_error
                       = (case f1_or_f2 of
                              Hs.Just (WrappedResponseOrErrorResponse f1)
                                -> (HsJSONPB.pair "response" f1)
                              Hs.Just (WrappedResponseOrErrorError f2)
                                -> (HsJSONPB.pair "error" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("or_error" .= (HsJSONPB.pairsOrNull [encodeOr_error] options))
                         options
                       else encodeOr_error options)])
 
instance HsJSONPB.FromJSONPB WrappedResponse where
        parseJSONPB
          = (HsJSONPB.withObject "WrappedResponse"
               (\ obj ->
                  (Hs.pure WrappedResponse) <*>
                    (let parseOr_error parseObj
                           = Hs.msum
                               [Hs.Just Hs.. WrappedResponseOrErrorResponse <$>
                                  (HsJSONPB.parseField parseObj "response"),
                                Hs.Just Hs.. WrappedResponseOrErrorError <$>
                                  (HsJSONPB.parseField parseObj "error"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "or_error") Hs.>>=
                          (HsJSONPB.withObject "or_error" parseOr_error))
                         <|> (parseOr_error obj))))
 
instance HsJSONPB.ToJSON WrappedResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON WrappedResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema WrappedResponse where
        declareNamedSchema _
          = do let declare_or_error = HsJSONPB.declareSchemaRef
               wrappedResponseOrError <- declare_or_error Proxy.Proxy
               let _ = Hs.pure WrappedResponse <*>
                         HsJSONPB.asProxy declare_or_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "WrappedResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("or_error", wrappedResponseOrError)]}})
 
data WrappedResponseOrError = WrappedResponseOrErrorResponse Proto.Mqtt.MQTTResponse
                            | WrappedResponseOrErrorError Proto.Mqtt.RemoteError
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named WrappedResponseOrError where
        nameOf _ = (Hs.fromString "WrappedResponseOrError")
 
instance HsJSONPB.ToSchema WrappedResponseOrError where
        declareNamedSchema _
          = do let declare_response = HsJSONPB.declareSchemaRef
               wrappedResponseOrErrorResponse <- declare_response Proxy.Proxy
               let _ = Hs.pure WrappedResponseOrErrorResponse <*>
                         HsJSONPB.asProxy declare_response
               let declare_error = HsJSONPB.declareSchemaRef
               wrappedResponseOrErrorError <- declare_error Proxy.Proxy
               let _ = Hs.pure WrappedResponseOrErrorError <*>
                         HsJSONPB.asProxy declare_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "WrappedResponseOrError",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("response",
                                                         wrappedResponseOrErrorResponse),
                                                        ("error", wrappedResponseOrErrorError)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype WrappedStreamChunk = WrappedStreamChunk{wrappedStreamChunkOrError
                                                :: Hs.Maybe WrappedStreamChunkOrError}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named WrappedStreamChunk where
        nameOf _ = (Hs.fromString "WrappedStreamChunk")
 
instance HsProtobuf.HasDefault WrappedStreamChunk
 
instance HsProtobuf.Message WrappedStreamChunk where
        encodeMessage _
          WrappedStreamChunk{wrappedStreamChunkOrError =
                               wrappedStreamChunkOrError}
          = (Hs.mconcat
               [case wrappedStreamChunkOrError of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             WrappedStreamChunkOrErrorElems y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.WrappedStreamChunk_Elems)
                                        @(HsProtobuf.Nested Proto.Mqtt.WrappedStreamChunk_Elems)
                                        (Hs.Just y)))
                             WrappedStreamChunkOrErrorError y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.RemoteError)
                                        @(HsProtobuf.Nested Proto.Mqtt.RemoteError)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure WrappedStreamChunk) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap WrappedStreamChunkOrErrorElems)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Proto.Mqtt.WrappedStreamChunk_Elems))
                        @(_ (Hs.Maybe Proto.Mqtt.WrappedStreamChunk_Elems))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap WrappedStreamChunkOrErrorError)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.RemoteError))
                        @(_ (Hs.Maybe Proto.Mqtt.RemoteError))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB WrappedStreamChunk where
        toJSONPB (WrappedStreamChunk f1_or_f2)
          = (HsJSONPB.object
               [(let encodeOr_error
                       = (case f1_or_f2 of
                              Hs.Just (WrappedStreamChunkOrErrorElems f1)
                                -> (HsJSONPB.pair "elems" f1)
                              Hs.Just (WrappedStreamChunkOrErrorError f2)
                                -> (HsJSONPB.pair "error" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("or_error" .= (HsJSONPB.objectOrNull [encodeOr_error] options))
                         options
                       else encodeOr_error options)])
        toEncodingPB (WrappedStreamChunk f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeOr_error
                       = (case f1_or_f2 of
                              Hs.Just (WrappedStreamChunkOrErrorElems f1)
                                -> (HsJSONPB.pair "elems" f1)
                              Hs.Just (WrappedStreamChunkOrErrorError f2)
                                -> (HsJSONPB.pair "error" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("or_error" .= (HsJSONPB.pairsOrNull [encodeOr_error] options))
                         options
                       else encodeOr_error options)])
 
instance HsJSONPB.FromJSONPB WrappedStreamChunk where
        parseJSONPB
          = (HsJSONPB.withObject "WrappedStreamChunk"
               (\ obj ->
                  (Hs.pure WrappedStreamChunk) <*>
                    (let parseOr_error parseObj
                           = Hs.msum
                               [Hs.Just Hs.. WrappedStreamChunkOrErrorElems <$>
                                  (HsJSONPB.parseField parseObj "elems"),
                                Hs.Just Hs.. WrappedStreamChunkOrErrorError <$>
                                  (HsJSONPB.parseField parseObj "error"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "or_error") Hs.>>=
                          (HsJSONPB.withObject "or_error" parseOr_error))
                         <|> (parseOr_error obj))))
 
instance HsJSONPB.ToJSON WrappedStreamChunk where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON WrappedStreamChunk where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema WrappedStreamChunk where
        declareNamedSchema _
          = do let declare_or_error = HsJSONPB.declareSchemaRef
               wrappedStreamChunkOrError <- declare_or_error Proxy.Proxy
               let _ = Hs.pure WrappedStreamChunk <*>
                         HsJSONPB.asProxy declare_or_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "WrappedStreamChunk",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("or_error", wrappedStreamChunkOrError)]}})
 
newtype WrappedStreamChunk_Elems = WrappedStreamChunk_Elems{wrappedStreamChunk_ElemsChunks
                                                            :: Hs.Vector Hs.ByteString}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named WrappedStreamChunk_Elems where
        nameOf _ = (Hs.fromString "WrappedStreamChunk_Elems")
 
instance HsProtobuf.HasDefault WrappedStreamChunk_Elems
 
instance HsProtobuf.Message WrappedStreamChunk_Elems where
        encodeMessage _
          WrappedStreamChunk_Elems{wrappedStreamChunk_ElemsChunks =
                                     wrappedStreamChunk_ElemsChunks}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      wrappedStreamChunk_ElemsChunks))])
        decodeMessage _
          = (Hs.pure WrappedStreamChunk_Elems) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "chunks")
                []
                "")]
 
instance HsJSONPB.ToJSONPB WrappedStreamChunk_Elems where
        toJSONPB (WrappedStreamChunk_Elems f1)
          = (HsJSONPB.object ["chunks" .= f1])
        toEncodingPB (WrappedStreamChunk_Elems f1)
          = (HsJSONPB.pairs ["chunks" .= f1])
 
instance HsJSONPB.FromJSONPB WrappedStreamChunk_Elems where
        parseJSONPB
          = (HsJSONPB.withObject "WrappedStreamChunk_Elems"
               (\ obj -> (Hs.pure WrappedStreamChunk_Elems) <*> obj .: "chunks"))
 
instance HsJSONPB.ToJSON WrappedStreamChunk_Elems where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON WrappedStreamChunk_Elems where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema WrappedStreamChunk_Elems where
        declareNamedSchema _
          = do let declare_chunks = HsJSONPB.declareSchemaRef
               wrappedStreamChunk_ElemsChunks <- declare_chunks Proxy.Proxy
               let _ = Hs.pure WrappedStreamChunk_Elems <*>
                         HsJSONPB.asProxy declare_chunks
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "WrappedStreamChunk_Elems",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chunks",
                                                         wrappedStreamChunk_ElemsChunks)]}})
 
data WrappedStreamChunkOrError = WrappedStreamChunkOrErrorElems Proto.Mqtt.WrappedStreamChunk_Elems
                               | WrappedStreamChunkOrErrorError Proto.Mqtt.RemoteError
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named WrappedStreamChunkOrError where
        nameOf _ = (Hs.fromString "WrappedStreamChunkOrError")
 
instance HsJSONPB.ToSchema WrappedStreamChunkOrError where
        declareNamedSchema _
          = do let declare_elems = HsJSONPB.declareSchemaRef
               wrappedStreamChunkOrErrorElems <- declare_elems Proxy.Proxy
               let _ = Hs.pure WrappedStreamChunkOrErrorElems <*>
                         HsJSONPB.asProxy declare_elems
               let declare_error = HsJSONPB.declareSchemaRef
               wrappedStreamChunkOrErrorError <- declare_error Proxy.Proxy
               let _ = Hs.pure WrappedStreamChunkOrErrorError <*>
                         HsJSONPB.asProxy declare_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "WrappedStreamChunkOrError",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("elems", wrappedStreamChunkOrErrorElems),
                                                        ("error", wrappedStreamChunkOrErrorError)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype MetadataMap = MetadataMap{metadataMapFields ::
                                  Hs.Vector Proto.Mqtt.MetadataMap_Entry}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MetadataMap where
        nameOf _ = (Hs.fromString "MetadataMap")
 
instance HsProtobuf.HasDefault MetadataMap
 
instance HsProtobuf.Message MetadataMap where
        encodeMessage _ MetadataMap{metadataMapFields = metadataMapFields}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Proto.Mqtt.MetadataMap_Entry)
                      @(HsProtobuf.NestedVec Proto.Mqtt.MetadataMap_Entry)
                      metadataMapFields))])
        decodeMessage _
          = (Hs.pure MetadataMap) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Proto.Mqtt.MetadataMap_Entry))
                 @(_ (Hs.Vector Proto.Mqtt.MetadataMap_Entry))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Entry")))
                (HsProtobuf.Single "fields")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MetadataMap where
        toJSONPB (MetadataMap f1) = (HsJSONPB.object ["fields" .= f1])
        toEncodingPB (MetadataMap f1) = (HsJSONPB.pairs ["fields" .= f1])
 
instance HsJSONPB.FromJSONPB MetadataMap where
        parseJSONPB
          = (HsJSONPB.withObject "MetadataMap"
               (\ obj -> (Hs.pure MetadataMap) <*> obj .: "fields"))
 
instance HsJSONPB.ToJSON MetadataMap where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MetadataMap where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MetadataMap where
        declareNamedSchema _
          = do let declare_fields = HsJSONPB.declareSchemaRef
               metadataMapFields <- declare_fields Proxy.Proxy
               let _ = Hs.pure MetadataMap <*> HsJSONPB.asProxy declare_fields
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MetadataMap",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("fields", metadataMapFields)]}})
 
data MetadataMap_Entry = MetadataMap_Entry{metadataMap_EntryKey ::
                                           Hs.ByteString,
                                           metadataMap_EntryValue :: Hs.Vector Hs.ByteString}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MetadataMap_Entry where
        nameOf _ = (Hs.fromString "MetadataMap_Entry")
 
instance HsProtobuf.HasDefault MetadataMap_Entry
 
instance HsProtobuf.Message MetadataMap_Entry where
        encodeMessage _
          MetadataMap_Entry{metadataMap_EntryKey = metadataMap_EntryKey,
                            metadataMap_EntryValue = metadataMap_EntryValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   metadataMap_EntryKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      metadataMap_EntryValue))])
        decodeMessage _
          = (Hs.pure MetadataMap_Entry) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MetadataMap_Entry where
        toJSONPB (MetadataMap_Entry f1 f2)
          = (HsJSONPB.object ["key" .= f1, "value" .= f2])
        toEncodingPB (MetadataMap_Entry f1 f2)
          = (HsJSONPB.pairs ["key" .= f1, "value" .= f2])
 
instance HsJSONPB.FromJSONPB MetadataMap_Entry where
        parseJSONPB
          = (HsJSONPB.withObject "MetadataMap_Entry"
               (\ obj ->
                  (Hs.pure MetadataMap_Entry) <*> obj .: "key" <*> obj .: "value"))
 
instance HsJSONPB.ToJSON MetadataMap_Entry where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MetadataMap_Entry where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MetadataMap_Entry where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               metadataMap_EntryKey <- declare_key Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               metadataMap_EntryValue <- declare_value Proxy.Proxy
               let _ = Hs.pure MetadataMap_Entry <*> HsJSONPB.asProxy declare_key
                         <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MetadataMap_Entry",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", metadataMap_EntryKey),
                                                        ("value", metadataMap_EntryValue)]}})
 
data AuxControl = AuxControlUnknown
                | AuxControlAlive
                | AuxControlTerminate
                deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AuxControl where
        nameOf _ = (Hs.fromString "AuxControl")
 
instance HsProtobuf.HasDefault AuxControl
 
instance Hs.Bounded AuxControl where
        minBound = AuxControlUnknown
        maxBound = AuxControlTerminate
 
instance Hs.Ord AuxControl where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum AuxControl where
        toProtoEnumMay 0 = Hs.Just AuxControlUnknown
        toProtoEnumMay 1 = Hs.Just AuxControlAlive
        toProtoEnumMay 2 = Hs.Just AuxControlTerminate
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (AuxControlUnknown) = 0
        fromProtoEnum (AuxControlAlive) = 1
        fromProtoEnum (AuxControlTerminate) = 2
 
instance HsJSONPB.ToJSONPB AuxControl where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB AuxControl where
        parseJSONPB (HsJSONPB.String "Unknown") = Hs.pure AuxControlUnknown
        parseJSONPB (HsJSONPB.String "Alive") = Hs.pure AuxControlAlive
        parseJSONPB (HsJSONPB.String "Terminate")
          = Hs.pure AuxControlTerminate
        parseJSONPB v = (HsJSONPB.typeMismatch "AuxControl" v)
 
instance HsJSONPB.ToJSON AuxControl where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AuxControl where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite AuxControl
 
newtype AuxControlMessage = AuxControlMessage{auxControlMessageValue
                                              :: HsProtobuf.Enumerated Proto.Mqtt.AuxControl}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AuxControlMessage where
        nameOf _ = (Hs.fromString "AuxControlMessage")
 
instance HsProtobuf.HasDefault AuxControlMessage
 
instance HsProtobuf.Message AuxControlMessage where
        encodeMessage _
          AuxControlMessage{auxControlMessageValue = auxControlMessageValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   auxControlMessageValue)])
        decodeMessage _
          = (Hs.pure AuxControlMessage) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "AuxControl")))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AuxControlMessage where
        toJSONPB (AuxControlMessage f1) = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (AuxControlMessage f1)
          = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB AuxControlMessage where
        parseJSONPB
          = (HsJSONPB.withObject "AuxControlMessage"
               (\ obj -> (Hs.pure AuxControlMessage) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON AuxControlMessage where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AuxControlMessage where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AuxControlMessage where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               auxControlMessageValue <- declare_value Proxy.Proxy
               let _ = Hs.pure AuxControlMessage <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AuxControlMessage",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", auxControlMessageValue)]}})
 
data RError = RErrorUnknownError
            | RErrorNoParseWireType
            | RErrorNoParseBinary
            | RErrorNoParseEmbedded
            | RErrorIOGRPCCallOk
            | RErrorIOGRPCCallError
            | RErrorIOGRPCCallNotOnServer
            | RErrorIOGRPCCallNotOnClient
            | RErrorIOGRPCCallAlreadyAccepted
            | RErrorIOGRPCCallAlreadyInvoked
            | RErrorIOGRPCCallNotInvoked
            | RErrorIOGRPCCallAlreadyFinished
            | RErrorIOGRPCCallTooManyOperations
            | RErrorIOGRPCCallInvalidFlags
            | RErrorIOGRPCCallInvalidMetadata
            | RErrorIOGRPCCallInvalidMessage
            | RErrorIOGRPCCallNotServerCompletionQueue
            | RErrorIOGRPCCallBatchTooBig
            | RErrorIOGRPCCallPayloadTypeMismatch
            | RErrorIOGRPCCallCompletionQueueShutdown
            | RErrorIOGRPCTimeout
            | RErrorIOGRPCShutdown
            | RErrorIOGRPCShutdownFailure
            | RErrorIOGRPCBadStatusCode
            | RErrorIOGRPCDecode
            | RErrorIOGRPCInternalUnexpectedRecv
            | RErrorIOGRPCHandlerException
            | RErrorMQTTFailure
            deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RError where
        nameOf _ = (Hs.fromString "RError")
 
instance HsProtobuf.HasDefault RError
 
instance Hs.Bounded RError where
        minBound = RErrorUnknownError
        maxBound = RErrorMQTTFailure
 
instance Hs.Ord RError where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum RError where
        toProtoEnumMay 0 = Hs.Just RErrorUnknownError
        toProtoEnumMay 1 = Hs.Just RErrorNoParseWireType
        toProtoEnumMay 2 = Hs.Just RErrorNoParseBinary
        toProtoEnumMay 3 = Hs.Just RErrorNoParseEmbedded
        toProtoEnumMay 4 = Hs.Just RErrorIOGRPCCallOk
        toProtoEnumMay 5 = Hs.Just RErrorIOGRPCCallError
        toProtoEnumMay 6 = Hs.Just RErrorIOGRPCCallNotOnServer
        toProtoEnumMay 7 = Hs.Just RErrorIOGRPCCallNotOnClient
        toProtoEnumMay 8 = Hs.Just RErrorIOGRPCCallAlreadyAccepted
        toProtoEnumMay 9 = Hs.Just RErrorIOGRPCCallAlreadyInvoked
        toProtoEnumMay 10 = Hs.Just RErrorIOGRPCCallNotInvoked
        toProtoEnumMay 11 = Hs.Just RErrorIOGRPCCallAlreadyFinished
        toProtoEnumMay 12 = Hs.Just RErrorIOGRPCCallTooManyOperations
        toProtoEnumMay 13 = Hs.Just RErrorIOGRPCCallInvalidFlags
        toProtoEnumMay 14 = Hs.Just RErrorIOGRPCCallInvalidMetadata
        toProtoEnumMay 15 = Hs.Just RErrorIOGRPCCallInvalidMessage
        toProtoEnumMay 16
          = Hs.Just RErrorIOGRPCCallNotServerCompletionQueue
        toProtoEnumMay 17 = Hs.Just RErrorIOGRPCCallBatchTooBig
        toProtoEnumMay 18 = Hs.Just RErrorIOGRPCCallPayloadTypeMismatch
        toProtoEnumMay 19 = Hs.Just RErrorIOGRPCCallCompletionQueueShutdown
        toProtoEnumMay 20 = Hs.Just RErrorIOGRPCTimeout
        toProtoEnumMay 21 = Hs.Just RErrorIOGRPCShutdown
        toProtoEnumMay 22 = Hs.Just RErrorIOGRPCShutdownFailure
        toProtoEnumMay 23 = Hs.Just RErrorIOGRPCBadStatusCode
        toProtoEnumMay 24 = Hs.Just RErrorIOGRPCDecode
        toProtoEnumMay 25 = Hs.Just RErrorIOGRPCInternalUnexpectedRecv
        toProtoEnumMay 26 = Hs.Just RErrorIOGRPCHandlerException
        toProtoEnumMay 27 = Hs.Just RErrorMQTTFailure
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (RErrorUnknownError) = 0
        fromProtoEnum (RErrorNoParseWireType) = 1
        fromProtoEnum (RErrorNoParseBinary) = 2
        fromProtoEnum (RErrorNoParseEmbedded) = 3
        fromProtoEnum (RErrorIOGRPCCallOk) = 4
        fromProtoEnum (RErrorIOGRPCCallError) = 5
        fromProtoEnum (RErrorIOGRPCCallNotOnServer) = 6
        fromProtoEnum (RErrorIOGRPCCallNotOnClient) = 7
        fromProtoEnum (RErrorIOGRPCCallAlreadyAccepted) = 8
        fromProtoEnum (RErrorIOGRPCCallAlreadyInvoked) = 9
        fromProtoEnum (RErrorIOGRPCCallNotInvoked) = 10
        fromProtoEnum (RErrorIOGRPCCallAlreadyFinished) = 11
        fromProtoEnum (RErrorIOGRPCCallTooManyOperations) = 12
        fromProtoEnum (RErrorIOGRPCCallInvalidFlags) = 13
        fromProtoEnum (RErrorIOGRPCCallInvalidMetadata) = 14
        fromProtoEnum (RErrorIOGRPCCallInvalidMessage) = 15
        fromProtoEnum (RErrorIOGRPCCallNotServerCompletionQueue) = 16
        fromProtoEnum (RErrorIOGRPCCallBatchTooBig) = 17
        fromProtoEnum (RErrorIOGRPCCallPayloadTypeMismatch) = 18
        fromProtoEnum (RErrorIOGRPCCallCompletionQueueShutdown) = 19
        fromProtoEnum (RErrorIOGRPCTimeout) = 20
        fromProtoEnum (RErrorIOGRPCShutdown) = 21
        fromProtoEnum (RErrorIOGRPCShutdownFailure) = 22
        fromProtoEnum (RErrorIOGRPCBadStatusCode) = 23
        fromProtoEnum (RErrorIOGRPCDecode) = 24
        fromProtoEnum (RErrorIOGRPCInternalUnexpectedRecv) = 25
        fromProtoEnum (RErrorIOGRPCHandlerException) = 26
        fromProtoEnum (RErrorMQTTFailure) = 27
 
instance HsJSONPB.ToJSONPB RError where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB RError where
        parseJSONPB (HsJSONPB.String "UnknownError")
          = Hs.pure RErrorUnknownError
        parseJSONPB (HsJSONPB.String "NoParseWireType")
          = Hs.pure RErrorNoParseWireType
        parseJSONPB (HsJSONPB.String "NoParseBinary")
          = Hs.pure RErrorNoParseBinary
        parseJSONPB (HsJSONPB.String "NoParseEmbedded")
          = Hs.pure RErrorNoParseEmbedded
        parseJSONPB (HsJSONPB.String "IOGRPCCallOk")
          = Hs.pure RErrorIOGRPCCallOk
        parseJSONPB (HsJSONPB.String "IOGRPCCallError")
          = Hs.pure RErrorIOGRPCCallError
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotOnServer")
          = Hs.pure RErrorIOGRPCCallNotOnServer
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotOnClient")
          = Hs.pure RErrorIOGRPCCallNotOnClient
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyAccepted")
          = Hs.pure RErrorIOGRPCCallAlreadyAccepted
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyInvoked")
          = Hs.pure RErrorIOGRPCCallAlreadyInvoked
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotInvoked")
          = Hs.pure RErrorIOGRPCCallNotInvoked
        parseJSONPB (HsJSONPB.String "IOGRPCCallAlreadyFinished")
          = Hs.pure RErrorIOGRPCCallAlreadyFinished
        parseJSONPB (HsJSONPB.String "IOGRPCCallTooManyOperations")
          = Hs.pure RErrorIOGRPCCallTooManyOperations
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidFlags")
          = Hs.pure RErrorIOGRPCCallInvalidFlags
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidMetadata")
          = Hs.pure RErrorIOGRPCCallInvalidMetadata
        parseJSONPB (HsJSONPB.String "IOGRPCCallInvalidMessage")
          = Hs.pure RErrorIOGRPCCallInvalidMessage
        parseJSONPB (HsJSONPB.String "IOGRPCCallNotServerCompletionQueue")
          = Hs.pure RErrorIOGRPCCallNotServerCompletionQueue
        parseJSONPB (HsJSONPB.String "IOGRPCCallBatchTooBig")
          = Hs.pure RErrorIOGRPCCallBatchTooBig
        parseJSONPB (HsJSONPB.String "IOGRPCCallPayloadTypeMismatch")
          = Hs.pure RErrorIOGRPCCallPayloadTypeMismatch
        parseJSONPB (HsJSONPB.String "IOGRPCCallCompletionQueueShutdown")
          = Hs.pure RErrorIOGRPCCallCompletionQueueShutdown
        parseJSONPB (HsJSONPB.String "IOGRPCTimeout")
          = Hs.pure RErrorIOGRPCTimeout
        parseJSONPB (HsJSONPB.String "IOGRPCShutdown")
          = Hs.pure RErrorIOGRPCShutdown
        parseJSONPB (HsJSONPB.String "IOGRPCShutdownFailure")
          = Hs.pure RErrorIOGRPCShutdownFailure
        parseJSONPB (HsJSONPB.String "IOGRPCBadStatusCode")
          = Hs.pure RErrorIOGRPCBadStatusCode
        parseJSONPB (HsJSONPB.String "IOGRPCDecode")
          = Hs.pure RErrorIOGRPCDecode
        parseJSONPB (HsJSONPB.String "IOGRPCInternalUnexpectedRecv")
          = Hs.pure RErrorIOGRPCInternalUnexpectedRecv
        parseJSONPB (HsJSONPB.String "IOGRPCHandlerException")
          = Hs.pure RErrorIOGRPCHandlerException
        parseJSONPB (HsJSONPB.String "MQTTFailure")
          = Hs.pure RErrorMQTTFailure
        parseJSONPB v = (HsJSONPB.typeMismatch "RError" v)
 
instance HsJSONPB.ToJSON RError where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RError where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite RError
 
data RemoteError = RemoteError{remoteErrorErrorType ::
                               HsProtobuf.Enumerated Proto.Mqtt.RError,
                               remoteErrorMessage :: Hs.Text,
                               remoteErrorExtra :: Hs.Maybe RemoteErrorExtra}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RemoteError where
        nameOf _ = (Hs.fromString "RemoteError")
 
instance HsProtobuf.HasDefault RemoteError
 
instance HsProtobuf.Message RemoteError where
        encodeMessage _
          RemoteError{remoteErrorErrorType = remoteErrorErrorType,
                      remoteErrorMessage = remoteErrorMessage,
                      remoteErrorExtra = remoteErrorExtra}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   remoteErrorErrorType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   remoteErrorMessage),
                case remoteErrorExtra of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RemoteErrorExtraStatusCode y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             RemoteErrorExtraEmbeddedError y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Proto.Mqtt.RemoteError)
                                        @(HsProtobuf.Nested Proto.Mqtt.RemoteError)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure RemoteError) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. RemoteErrorExtraStatusCode)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap RemoteErrorExtraEmbeddedError)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Proto.Mqtt.RemoteError))
                        @(_ (Hs.Maybe Proto.Mqtt.RemoteError))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "RError")))
                (HsProtobuf.Single "error_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "message")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RemoteError where
        toJSONPB (RemoteError f1 f2 f3_or_f4)
          = (HsJSONPB.object
               ["error_type" .= f1, "message" .= f2,
                (let encodeExtra
                       = (case f3_or_f4 of
                              Hs.Just (RemoteErrorExtraStatusCode f3)
                                -> (HsJSONPB.pair "status_code" f3)
                              Hs.Just (RemoteErrorExtraEmbeddedError f4)
                                -> (HsJSONPB.pair "embedded_error" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("extra" .= (HsJSONPB.objectOrNull [encodeExtra] options)) options
                       else encodeExtra options)])
        toEncodingPB (RemoteError f1 f2 f3_or_f4)
          = (HsJSONPB.pairs
               ["error_type" .= f1, "message" .= f2,
                (let encodeExtra
                       = (case f3_or_f4 of
                              Hs.Just (RemoteErrorExtraStatusCode f3)
                                -> (HsJSONPB.pair "status_code" f3)
                              Hs.Just (RemoteErrorExtraEmbeddedError f4)
                                -> (HsJSONPB.pair "embedded_error" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("extra" .= (HsJSONPB.pairsOrNull [encodeExtra] options)) options
                       else encodeExtra options)])
 
instance HsJSONPB.FromJSONPB RemoteError where
        parseJSONPB
          = (HsJSONPB.withObject "RemoteError"
               (\ obj ->
                  (Hs.pure RemoteError) <*> obj .: "error_type" <*> obj .: "message"
                    <*>
                    (let parseExtra parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RemoteErrorExtraStatusCode <$>
                                  (HsJSONPB.parseField parseObj "status_code"),
                                Hs.Just Hs.. RemoteErrorExtraEmbeddedError <$>
                                  (HsJSONPB.parseField parseObj "embedded_error"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "extra") Hs.>>= (HsJSONPB.withObject "extra" parseExtra))
                         <|> (parseExtra obj))))
 
instance HsJSONPB.ToJSON RemoteError where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RemoteError where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RemoteError where
        declareNamedSchema _
          = do let declare_error_type = HsJSONPB.declareSchemaRef
               remoteErrorErrorType <- declare_error_type Proxy.Proxy
               let declare_message = HsJSONPB.declareSchemaRef
               remoteErrorMessage <- declare_message Proxy.Proxy
               let declare_extra = HsJSONPB.declareSchemaRef
               remoteErrorExtra <- declare_extra Proxy.Proxy
               let _ = Hs.pure RemoteError <*> HsJSONPB.asProxy declare_error_type
                         <*> HsJSONPB.asProxy declare_message
                         <*> HsJSONPB.asProxy declare_extra
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RemoteError",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("error_type", remoteErrorErrorType),
                                                        ("message", remoteErrorMessage),
                                                        ("extra", remoteErrorExtra)]}})
 
data RemoteErrorExtra = RemoteErrorExtraStatusCode Hs.Int32
                      | RemoteErrorExtraEmbeddedError Proto.Mqtt.RemoteError
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RemoteErrorExtra where
        nameOf _ = (Hs.fromString "RemoteErrorExtra")
 
instance HsJSONPB.ToSchema RemoteErrorExtra where
        declareNamedSchema _
          = do let declare_status_code = HsJSONPB.declareSchemaRef
               remoteErrorExtraStatusCode <- declare_status_code Proxy.Proxy
               let _ = Hs.pure RemoteErrorExtraStatusCode <*>
                         HsJSONPB.asProxy declare_status_code
               let declare_embedded_error = HsJSONPB.declareSchemaRef
               remoteErrorExtraEmbeddedError <- declare_embedded_error Proxy.Proxy
               let _ = Hs.pure RemoteErrorExtraEmbeddedError <*>
                         HsJSONPB.asProxy declare_embedded_error
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RemoteErrorExtra",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("status_code", remoteErrorExtraStatusCode),
                                                        ("embedded_error",
                                                         remoteErrorExtraEmbeddedError)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})