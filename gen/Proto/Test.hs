{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.Test where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data AddHello request response = AddHello{addHelloAdd ::
                                          request 'HsGRPC.Normal Proto.Test.TwoInts
                                            Proto.Test.OneInt
                                            -> Hs.IO (response 'HsGRPC.Normal Proto.Test.OneInt),
                                          addHelloHelloSS ::
                                          request 'HsGRPC.ServerStreaming Proto.Test.SSRqt
                                            Proto.Test.SSRpy
                                            ->
                                            Hs.IO
                                              (response 'HsGRPC.ServerStreaming Proto.Test.SSRpy),
                                          addHelloRunningSum ::
                                          request 'HsGRPC.ClientStreaming Proto.Test.OneInt
                                            Proto.Test.OneInt
                                            ->
                                            Hs.IO
                                              (response 'HsGRPC.ClientStreaming Proto.Test.OneInt),
                                          addHelloHelloBi ::
                                          request 'HsGRPC.BiDiStreaming Proto.Test.BiRqtRpy
                                            Proto.Test.BiRqtRpy
                                            ->
                                            Hs.IO
                                              (response 'HsGRPC.BiDiStreaming Proto.Test.BiRqtRpy)}
                               deriving Hs.Generic
 
addHelloServer ::
                 AddHello HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                   HsGRPC.ServiceOptions -> Hs.IO ()
addHelloServer
  AddHello{addHelloAdd = addHelloAdd,
           addHelloHelloSS = addHelloHelloSS,
           addHelloRunningSum = addHelloRunningSum,
           addHelloHelloBi = addHelloHelloBi}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/test.AddHello/Add")
                                   (HsGRPC.convertGeneratedServerHandler addHelloAdd))],
                             HsGRPC.optClientStreamHandlers =
                               [(HsGRPC.ClientStreamHandler
                                   (HsGRPC.MethodName "/test.AddHello/RunningSum")
                                   (HsGRPC.convertGeneratedServerReaderHandler
                                      addHelloRunningSum))],
                             HsGRPC.optServerStreamHandlers =
                               [(HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName "/test.AddHello/HelloSS")
                                   (HsGRPC.convertGeneratedServerWriterHandler addHelloHelloSS))],
                             HsGRPC.optBiDiStreamHandlers =
                               [(HsGRPC.BiDiStreamHandler
                                   (HsGRPC.MethodName "/test.AddHello/HelloBi")
                                   (HsGRPC.convertGeneratedServerRWHandler addHelloHelloBi))],
                             optServerHost = serverHost, optServerPort = serverPort,
                             optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength})
 
addHelloClient ::
                 HsGRPC.Client ->
                   Hs.IO (AddHello HsGRPC.ClientRequest HsGRPC.ClientResult)
addHelloClient client
  = (Hs.pure AddHello) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.AddHello/Add")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.AddHello/HelloSS")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.AddHello/RunningSum")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.AddHello/HelloBi")))
 
data MultGoodbye request response = MultGoodbye{multGoodbyeMult ::
                                                request 'HsGRPC.Normal Proto.Test.TwoInts
                                                  Proto.Test.OneInt
                                                  ->
                                                  Hs.IO (response 'HsGRPC.Normal Proto.Test.OneInt),
                                                multGoodbyeGoodbyeSS ::
                                                request 'HsGRPC.ServerStreaming Proto.Test.SSRqt
                                                  Proto.Test.SSRpy
                                                  ->
                                                  Hs.IO
                                                    (response 'HsGRPC.ServerStreaming
                                                       Proto.Test.SSRpy),
                                                multGoodbyeRunningProd ::
                                                request 'HsGRPC.ClientStreaming Proto.Test.OneInt
                                                  Proto.Test.OneInt
                                                  ->
                                                  Hs.IO
                                                    (response 'HsGRPC.ClientStreaming
                                                       Proto.Test.OneInt)}
                                  deriving Hs.Generic
 
multGoodbyeServer ::
                    MultGoodbye HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                      HsGRPC.ServiceOptions -> Hs.IO ()
multGoodbyeServer
  MultGoodbye{multGoodbyeMult = multGoodbyeMult,
              multGoodbyeGoodbyeSS = multGoodbyeGoodbyeSS,
              multGoodbyeRunningProd = multGoodbyeRunningProd}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/test.MultGoodbye/Mult")
                                   (HsGRPC.convertGeneratedServerHandler multGoodbyeMult))],
                             HsGRPC.optClientStreamHandlers =
                               [(HsGRPC.ClientStreamHandler
                                   (HsGRPC.MethodName "/test.MultGoodbye/RunningProd")
                                   (HsGRPC.convertGeneratedServerReaderHandler
                                      multGoodbyeRunningProd))],
                             HsGRPC.optServerStreamHandlers =
                               [(HsGRPC.ServerStreamHandler
                                   (HsGRPC.MethodName "/test.MultGoodbye/GoodbyeSS")
                                   (HsGRPC.convertGeneratedServerWriterHandler
                                      multGoodbyeGoodbyeSS))],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength})
 
multGoodbyeClient ::
                    HsGRPC.Client ->
                      Hs.IO (MultGoodbye HsGRPC.ClientRequest HsGRPC.ClientResult)
multGoodbyeClient client
  = (Hs.pure MultGoodbye) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.MultGoodbye/Mult")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.MultGoodbye/GoodbyeSS")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/test.MultGoodbye/RunningProd")))
 
data TwoInts = TwoInts{twoIntsX :: Hs.Int32, twoIntsY :: Hs.Int32}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TwoInts where
        nameOf _ = (Hs.fromString "TwoInts")
 
instance HsProtobuf.HasDefault TwoInts
 
instance HsProtobuf.Message TwoInts where
        encodeMessage _ TwoInts{twoIntsX = twoIntsX, twoIntsY = twoIntsY}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   twoIntsX),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   twoIntsY)])
        decodeMessage _
          = (Hs.pure TwoInts) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "x")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "y")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TwoInts where
        toJSONPB (TwoInts f1 f2) = (HsJSONPB.object ["x" .= f1, "y" .= f2])
        toEncodingPB (TwoInts f1 f2)
          = (HsJSONPB.pairs ["x" .= f1, "y" .= f2])
 
instance HsJSONPB.FromJSONPB TwoInts where
        parseJSONPB
          = (HsJSONPB.withObject "TwoInts"
               (\ obj -> (Hs.pure TwoInts) <*> obj .: "x" <*> obj .: "y"))
 
instance HsJSONPB.ToJSON TwoInts where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TwoInts where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TwoInts where
        declareNamedSchema _
          = do let declare_x = HsJSONPB.declareSchemaRef
               twoIntsX <- declare_x Proxy.Proxy
               let declare_y = HsJSONPB.declareSchemaRef
               twoIntsY <- declare_y Proxy.Proxy
               let _ = Hs.pure TwoInts <*> HsJSONPB.asProxy declare_x <*>
                         HsJSONPB.asProxy declare_y
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TwoInts",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("x", twoIntsX), ("y", twoIntsY)]}})
 
newtype OneInt = OneInt{oneIntResult :: Hs.Int32}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OneInt where
        nameOf _ = (Hs.fromString "OneInt")
 
instance HsProtobuf.HasDefault OneInt
 
instance HsProtobuf.Message OneInt where
        encodeMessage _ OneInt{oneIntResult = oneIntResult}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   oneIntResult)])
        decodeMessage _
          = (Hs.pure OneInt) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "result")
                []
                "")]
 
instance HsJSONPB.ToJSONPB OneInt where
        toJSONPB (OneInt f1) = (HsJSONPB.object ["result" .= f1])
        toEncodingPB (OneInt f1) = (HsJSONPB.pairs ["result" .= f1])
 
instance HsJSONPB.FromJSONPB OneInt where
        parseJSONPB
          = (HsJSONPB.withObject "OneInt"
               (\ obj -> (Hs.pure OneInt) <*> obj .: "result"))
 
instance HsJSONPB.ToJSON OneInt where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON OneInt where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema OneInt where
        declareNamedSchema _
          = do let declare_result = HsJSONPB.declareSchemaRef
               oneIntResult <- declare_result Proxy.Proxy
               let _ = Hs.pure OneInt <*> HsJSONPB.asProxy declare_result
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "OneInt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("result", oneIntResult)]}})
 
data SSRqt = SSRqt{ssrqtName :: Hs.Text,
                   ssrqtNumReplies :: Hs.Word32}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SSRqt where
        nameOf _ = (Hs.fromString "SSRqt")
 
instance HsProtobuf.HasDefault SSRqt
 
instance HsProtobuf.Message SSRqt where
        encodeMessage _
          SSRqt{ssrqtName = ssrqtName, ssrqtNumReplies = ssrqtNumReplies}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   ssrqtName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   ssrqtNumReplies)])
        decodeMessage _
          = (Hs.pure SSRqt) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "num_replies")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SSRqt where
        toJSONPB (SSRqt f1 f2)
          = (HsJSONPB.object ["name" .= f1, "num_replies" .= f2])
        toEncodingPB (SSRqt f1 f2)
          = (HsJSONPB.pairs ["name" .= f1, "num_replies" .= f2])
 
instance HsJSONPB.FromJSONPB SSRqt where
        parseJSONPB
          = (HsJSONPB.withObject "SSRqt"
               (\ obj ->
                  (Hs.pure SSRqt) <*> obj .: "name" <*> obj .: "num_replies"))
 
instance HsJSONPB.ToJSON SSRqt where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SSRqt where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SSRqt where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               ssrqtName <- declare_name Proxy.Proxy
               let declare_num_replies = HsJSONPB.declareSchemaRef
               ssrqtNumReplies <- declare_num_replies Proxy.Proxy
               let _ = Hs.pure SSRqt <*> HsJSONPB.asProxy declare_name <*>
                         HsJSONPB.asProxy declare_num_replies
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "SSRqt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", ssrqtName),
                                                        ("num_replies", ssrqtNumReplies)]}})
 
newtype SSRpy = SSRpy{ssrpyGreeting :: Hs.Text}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SSRpy where
        nameOf _ = (Hs.fromString "SSRpy")
 
instance HsProtobuf.HasDefault SSRpy
 
instance HsProtobuf.Message SSRpy where
        encodeMessage _ SSRpy{ssrpyGreeting = ssrpyGreeting}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   ssrpyGreeting)])
        decodeMessage _
          = (Hs.pure SSRpy) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "greeting")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SSRpy where
        toJSONPB (SSRpy f1) = (HsJSONPB.object ["greeting" .= f1])
        toEncodingPB (SSRpy f1) = (HsJSONPB.pairs ["greeting" .= f1])
 
instance HsJSONPB.FromJSONPB SSRpy where
        parseJSONPB
          = (HsJSONPB.withObject "SSRpy"
               (\ obj -> (Hs.pure SSRpy) <*> obj .: "greeting"))
 
instance HsJSONPB.ToJSON SSRpy where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SSRpy where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SSRpy where
        declareNamedSchema _
          = do let declare_greeting = HsJSONPB.declareSchemaRef
               ssrpyGreeting <- declare_greeting Proxy.Proxy
               let _ = Hs.pure SSRpy <*> HsJSONPB.asProxy declare_greeting
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "SSRpy",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("greeting", ssrpyGreeting)]}})
 
newtype BiRqtRpy = BiRqtRpy{biRqtRpyMessage :: Hs.Text}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BiRqtRpy where
        nameOf _ = (Hs.fromString "BiRqtRpy")
 
instance HsProtobuf.HasDefault BiRqtRpy
 
instance HsProtobuf.Message BiRqtRpy where
        encodeMessage _ BiRqtRpy{biRqtRpyMessage = biRqtRpyMessage}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   biRqtRpyMessage)])
        decodeMessage _
          = (Hs.pure BiRqtRpy) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "message")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BiRqtRpy where
        toJSONPB (BiRqtRpy f1) = (HsJSONPB.object ["message" .= f1])
        toEncodingPB (BiRqtRpy f1) = (HsJSONPB.pairs ["message" .= f1])
 
instance HsJSONPB.FromJSONPB BiRqtRpy where
        parseJSONPB
          = (HsJSONPB.withObject "BiRqtRpy"
               (\ obj -> (Hs.pure BiRqtRpy) <*> obj .: "message"))
 
instance HsJSONPB.ToJSON BiRqtRpy where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BiRqtRpy where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BiRqtRpy where
        declareNamedSchema _
          = do let declare_message = HsJSONPB.declareSchemaRef
               biRqtRpyMessage <- declare_message Proxy.Proxy
               let _ = Hs.pure BiRqtRpy <*> HsJSONPB.asProxy declare_message
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BiRqtRpy",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("message", biRqtRpyMessage)]}})